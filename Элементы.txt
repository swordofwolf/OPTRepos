Для использования в программах “Крабик (V)_ii_(V)”  определен следующий набор символов:
Буквы, цифра и подчеркивание
Набор символов “Крабик (V)_ii_(V)”   содержит прописные и строчные буквы латинского алфавита, 10 десятичных цифр арабской системы исчисления и символ подчеркивания (_).
·	Прописные английские буквы:
·	      A B C D E F G H I J K L M N O P Q R S T U V W X Y Z   
·	Строчные английские буквы:
·	      a b c d e f g h i j k l m n o p q r s t u v w x y z   
·	Десятичные цифры:
·	      0 1 2 3 4 5 6 7 8 9   
·	Символ подчеркивания (_)
Используются для формирования ключевых слов, констант и идентификаторов.
Разделительные символы
Пробел, смена строки, возврат каретки и символ новой строки. Эти символы отделяют задаваемые пользователем элементы (например, константы и идентификаторы, от других элементов программы.
Компилятор языка “Крабик (V)_ii_(V)”   игнорирует разделительные символы, если они не служат для целей разделения или не являются компонентами символьных констант или строковых литералов. Компилятор рассматривает комментарии, как разделительные символы
Знаки пунктуации и специальные символы
Знаки пунктуации и специальные символы из набора символов языка “Крабик (V)_ii_(V)”   В Таблице 2.1 приведен список знаков пунктуации и специальных символов из набора символов “Крабик (V)_ii_(V)”  .
Таблица 2.1. Знаки пунктуации и специальные символы
                Символ    Название   
   
                ,         запятая   
                .         точка   
                ;         точка с запятой   
                :         двоеточие   
                ?         знак вопроса   
                '         одинарная цитатная скобка   
                "         двойная цитатная скобка   
                (         левая круглая скобка   
                )         правая круглая скобка   
                [         левая прямоугольная скобка   
                ]         правая прямоугольная скобка   
                {         левая фигурная скобка   
                }         правая фигурная скобка   
                <         левая угловая скобка   
                >         правая угловая скобка   
                !         восклицательный знак   
                |         вертикальная черта   
                /         знак деления   
                \         знак обратного деления   
                ~         тильда   
                +         плюс   
                #         номер   
                %         процент   
                &         амперсанд   
                ^         крышечка   
                *         звездочка   
                -         минус   
                =         равно   
Управляющие последовательности
Строки и символьные константы могут содержать "управляющие последовательности". Управляющие последовательности это комбинации символов, состоящие из разделительного символа и неграфических символов. Управляющая последовательность состоит из знака обратного деления (\) за которым следует буква или комбинация цифр.
Таблица 2.2 содержит список управляющих последовательностей.
      Таблица 2.2. Управляющие последовательности   
   
      Управляющая            Название   
      последовательность   
   
      \n                 новая строка   
      \t                 горизонтальная табуляция   
      \v                 вертикальная табуляция   
      \b                 забой   
      \r                 возврат каретки   
      \f                 смена листа   
      \a                 зуммер   
      \'                 одинарная цитатная скобка   
      \"                 двойная цитатная скобка   
      \\                 обратное деление   
      \ddd               восьмеричное значение символа ASCII   
      \xddd              шестнадцатеричное значение символа ASCII      



Операторы
"Операторы" это символы (состоящие из одного символа или комбинации символов), которые задают манипуляции над значениями. Каждый символ интерпретируется как отдельный элемент, называемый "лексемой". (Определение лексем содержится в разделе "Лексемы".)
В Таблице 2.3 содержится список унарных операторов “Крабик (V)_ii_(V)”  с их именами. В Таблице 2.4 содержится список бинарных операторов “Крабик (V)_ii_(V)”  с их именами. Операторы нужно задавать так, как они показаны в таблицах, без разделительных знаков в многосимвольных операторах. Обратите внимание на то, что три символа операторов (звездочка, знак минуса и амперсанд) появляются в двух таблицах. Их унарная или бинарная интерпретация зависит от контекста, в котором они появляются.
 Таблица 2.3. "Унарные операторы"
           Оператор  Название   
   
              !      логическое НЕ   
              ~      битовое дополнение   
              -      арифметическое отрицание   
              *      индерекция   
              +      унарный плюс   
Таблица 2.4. "Бинарные и тернарные операторы"
           Оператор  Название   
   
              +      сложение   
              -      вычитание   
              *      умножение   
              /      деление   
              %      остаток   
              <=     меньше или равно   
              >      больше   
              >=     больше или равно   
              ==     эквивалентно   
              !=     неэквивалентность   
              &&     логическое И   
              ||     логическое ИЛИ   
              ,      последовательное   
              ++     инкремент   
              --     декремент   
              =      простое присвоение   
             



2.3 Константы
Константа это число, символ или строка символов, которая в программе используется, как значение. Значение константы нельзя изменить.
В языке “Крабик (V)_ii_(V)” есть четыре вида констант: целые, с плавающей точкой, символьные и строковые литералы, логические.
Целые константы
      Синтаксис:    цифры   
                     0цифры   
                     0xцифры   
                     0Xцифры   
·	"Десятичная константа" имеет форму одной или нескольких цифр (от 0 до 9), первая из которых не ноль.
·	"Восьмеричная константа" имеет форму 0цифры, где цифры это одно или нескольких восьмеричных цифр (от 0 до 7), первая из которых ноль.
·	"Шестнадцатеричная константа" имеет форму 0xцифры или 0Xцифры, где цифры это одно или нескольких шестнадцатеричных цифр (от 0 до 9 и прописные или строчные буквы от a до f), указание 0x или 0X обязательно.
В Таблице 2.5 приведены примеры трех форм целых констант.
      Таблица 2.5. Примеры целых констант   
   
      Десятичные     Восьмеричные   Шестнадцатеричные   
   
      10             012            0xa или 0xA   
      132            0204           0x84   
      32179          076663         0x7db3 или 0x7DB3   
Целые константы всегда имеют положительные значения. Если нужно использовать отрицательное значение, то поместите знак минус (-) перед константой для формирования выражения с отрицательным значением. (В данном случае знак минус интерпретируется как унарный арифметический оператор отрицания.)
Каждой целой константе на основании ее значения присваивается соответствующий тип. Тип константы определяет, какие преобразования будут выполнены при использовании константы в выражении или использовании знака минус (-). Можно сформулировать следующие правила:


·	Десятичные константы рассматриваются как величины со знаками и имеют тип int.
·	Восьмеричные и шестнадцатеричные константы в зависимости от размера имеют тип int.
      Таблица 2.6. Типы, присваиваемые восьмеричным и   
                   шестнадцатеричным константам   
  
 Шестнадцатеричные        Восьмеричные             Тип   
   
 0x0-0x7FFF            0-077777                  int   
Константы с плавающей точкой
      Синтаксис:     [цифры][.цифры][E|e-[+]цифры]   
Константы с плавающей точкой всегда имеют положительные значения. Если нужно использовать отрицательное значение, то поместите знак минус (-) перед константой для формирования выражения с отрицательным значением. В данном случае знак минус интерпретируется как арифметический оператор.
Все константы с плавающей точкой имеют тип float.
Примеры
Следующие примеры иллюстрируют некоторые формы констант и выражений с плавающей точкой:
           15.75   
           1.575E1   
           1575e-2   
           -0.0025   
           -2.5e-3   
           25E-4   
	




















 
Строковые литералы
      Синтаксис:     "символы"["символы"]...   :
           "This is f string literal."   
Строковые литералы имеют тип String. 
2.4 Идентификаторы
      Синтаксис:     буква|_[буква|цифра|_]...   
Идентификатор создается его заданием в объявлении переменной, типа или функции. После этого его можно использовать в операторах программы для ссылки на связанный с ним элемент. Хотя метки и являются специальным видом идентификаторов и имеют собственный класс, их создание аналогично созданию идентификаторов для переменных и функций. (Определения описаны в главе "Определения", а метки описаны в главе "Операторы".)
Компилятор “Крабик (V)_ii_(V)” рассматривает прописные и строчные буквы как разные символы, поэтому можно создать разные идентификаторы с одинаковым произношением, но с одной или несколькими буквами иного размера.
Идентификаторы не могут иметь произношение и написание, совпадающее с ключевыми словами языка. Ключевые слова описаны в разделе "Ключевые слова".
Приведем ряд примеров для идентификаторов:
           j   
           cnt   
           temp1   
           top_of_page   
           skip12   
2.5 Ключевые слова
"Ключевые слова" это заранее определенные идентификаторы, которые имеют для компилятора “Крабик (V)_ii_(V)”специальное значение. Их можно использовать только так, как они определены. Имя элемента программы не может совпадать по произношению и написанию с ключевым словом.
В языке “Крабик (V)_ii_(V)”имеются следующие ключевые слова:
 int            struct   	   break          else          
 switch   	  return         union   	    const          
 float          continue       for            while           
 goto           do             if                

2.6 Комментарии
      Синтаксис:     /* символы */   

Комментарии могут появляться везде, где допустимо появление разделительных символов. Комментарий рассматривается компилятором как единичный разделительный символ, поэтому нельзя включать комментарии с лексемами. Однако, из-за того, что компилятор игнорирует символы комментария, в его текст можно включать ключевые слова без появления ошибок.
Приведем ряд примеров, иллюстрирующих комментарии:
           /* Comments can separate and document   
              lines of programm. */   
           /* Comments can contain keywords such as for   
             and while. */   
   
           /*****************************************   
            Comments can occupy several lines.   
            *****************************************/   
2.7 Лексемы
В исходном тексте программы на языке “Крабик (V)_ii_(V)” компилятор распознает основные элементы из групп символов, называемые "лексемами". Лексема это текст исходной программы, который компилятор не анализирует на входящие в него компоненты.
Например, в следующем фрагменте программы слово elsewhere использовано в качестве имени функции. Хотя else и является ключевым словом в С, конфликта между лексемой имени функции и лексемой ключевого слова С не не происходит.
                main()   
                {   
                     int i = 0;   
                          if (i)   
                          elsewhere();   
                }   

