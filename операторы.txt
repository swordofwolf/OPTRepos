

Операторы программы на языке "крабик" управляют процессом ее выполнения. В языке имеется ряд операторов, с помощью которых можно выполнять циклы, указывать другие операторы для выполнения и передавать управление на другой участок программы. 
В операторах языка "крабик" появляются следующие ключевые слова:

----------------if [else]*--------------------

Синтаксис:     if (выражение)   
                          оператор 1   
                     [else   
                          оператор2]   
Выполнение
Тело оператора if выполняется выборочно, в зависимости от значения выражения, по следующей схеме:

Вычисляется значение выражения.
Если значение выражения "истина" (не ноль), то выполняется оператор1.
Если значение выражения "ложь", то выполняется оператор2.
Если значение выражения "ложь" и не задана статья else, то оператор1 игнорируется.
Управление передается от оператора if на следующий оператор программы.




-----------for--------------------

Синтаксис:     for([начальное-выражение];   
                         [условное-выражение];   
                         [выражение-цикла])   
                         оператор   

Тело оператора for может выполниться несколько раз, а может не выполниться ни разу, пока значением необязательного условного-выражения не станет "ложь". Можно использовать необязательные начальное-выражение и выражение-цикла для инициализации и смены значений при выполнении операторов for.

Выполнение оператора for происходит следующим образом:

1. Вычисляется начальное-выражение, если оно есть.
2. Вычисляется условное-выражение, если оно есть. Возможны три результата:
3. Если значение условного-выражения "истина" (ненулевое), то выполняется оператор. Затем вычисляется выражение-цикла, если оно есть. Процесс начинается снова с вычисления условного-выражения.
4. Если условное-выражение опущено, то считается, что его значение "истина" и процесс выполнения протекает так, как это описано в первом случае. Оператор for без аргумента условного-выражения прекращает свое выполнение только в случае выполнения оператора break или return в теле оператора, или при выполнении оператора goto (который передаст управление на оператор с меткой вне тела оператора for).
5. Если значение условного-выражения "ложь", то выполнение оператора for прекращается и управление передается к следующему оператору программы.

Оператор for также прекращает свое выполнение при выполнении в теле оператора оператора break, goto или return.

---------do-----------------
 Синтаксис:     do   
                          оператор   
                     while (выражение);   

Тело оператора do выполняется один или несколько раз до тех пор, пока значением выражения не станет "ложь" (0). Выполнение происходит следующим образом:

1. Выполняется тело оператора.
2. Вычисляется выражение. Если его значение "ложь", то выполнение оператора do заканчивается и управление передается следующему оператору программы. Если его значение "истина" (ненулевое значение), то процесс повторяется, начиная с шага 1.

Выполнение оператора do может быть прервано выполнением оператора break, goto или return в теле оператора do.


-------------while----------------


Синтаксис:     while (выражение)   
                          оператор   
Выполнение
Тело оператора while выполнится ноль или более раз до тех пор, пока значением выражения не станет "ложь" (0). Процесс выполнения протекает следующим образом:

Вычисляется значение выражения.
Если значение выражения есть "ложь", то тело оператора while не выполняется, и управление передается на следующий за оператором while оператор программы.
Если значение выражения есть "истина" (не ноль), то выполняется тело оператора и процесс повторяется с шага 1.



------------------switch case------------------
 Синтаксис:     switch (выражение) {   
                          [объявление]   
                          .   
                          .   
                          .   
                          [case постоянное-выражение:]   
                          .   
                          .   
                          .   
                               [оператор]   
                               .   
                               .   
                               .   
                          [default:   
                               [оператор]]   
                     }   

Оператор switch передает управление на оператор в своем теле. Управление будет передано тому оператору, значение case постоянное-выражение которого совпадает с выражением switch. Оператор switch может содержать любое число элементов case. Выполнение тела оператора начинается в выбранном операторе и заканчивается в конце тела или в тот момент, когда оператор передаст управление вне тела.

Оператор default выполняется в том случае, если ни одно постоянное-выражение case которого не совпадет с выражением switch. Если оператор default не задан и ни одно совпадение с case не обнаружено, то ни один из операторов тела switch не будет выполнен. Располагать оператор default в конце не обязательно, он может появиться в произвольном месте тела оператора switch.

Выражение switch должно иметь интегральный тип, но результирующее значение будет преобразовано в int. Затем каждое постоянное-выражение case будет преобразовано с использованием обычных арифметических преобразований. Значения всех постоянных-выражений case должны быть разными в теле оператора. если тип выражения switch больше int, то появится диагностическое сообщение.

Метки case и default тела оператора switch действуют только при первоначальной проверке, определяющей начало выполнения тела цикла. Все операторы от начала выполнения и до конца тела выполняются независимо от их меток, кроме случая, когда управление передается в часть программы вне тела оператора.







---------------------goto-----------------

Синтаксис:     goto имя;   
                     .   
                     .   
                     .   
                     имя: оператор   

Оператор goto передает управление непосредственно на оператор, который имеет своей меткой "имя". Оператор сметкой будет выполнен сразу после выполнения оператора goto. Оператор с заданной меткой должен находиться в той же самой функции и заданная метка может помечать только один оператор в данной функции.

Метка оператора имеет смысл только для оператора goto. В любом другом контексте оператор с меткой выполняется так, как если бы ее вообще не было.



----------------break------------------
Синтаксис:     break;   
Оператор break прекращает выполнение вложенного оператора do, for, switch или while, в котором он появляется. Управление передается тому оператору, который непосредственно следует за прерванным оператором. Оператор break может появиться только в операторах do, for, switch или while.



------------------------continue----------------
Синтаксис:     continue;   
Оператор continue передает управление на следующую итерацию оператора do, for или while, в котором он появляется передавая все оставшиеся операторы тела оператора do, for или while. Следующая итерация оператора do, for или while понимается следующим образом:

1. В операторе do или while следующая итерация начинается вычислением выражения оператора do или while.
2. В операторе for следующая итерация начинается вычислением выражения цикла оператора for. После вычисления условного выражения в зависимости от его результатов происходит либо прекращение выполнения оператора либо выполнение его тела. 




------------return----------------------

 Синтаксис:     return [выражение]   
Выполнение
Оператор return прекращает выполнение функции, в которой он появляется и передает управление на вызов функции. Выполнение программы продолжается непосредственно с той точки, откуда был произведен вызов функции. Значение выражения, если оно есть, передается на вызов функции. Если выражение не задано, то возвращаемое функцией значение не определено.